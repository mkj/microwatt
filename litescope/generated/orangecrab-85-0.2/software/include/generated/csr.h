//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (--------) on 2021-12-08 16:36:59
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* analyzer */
#define CSR_ANALYZER_BASE (CSR_BASE + 0x0L)
#define CSR_ANALYZER_MUX_VALUE_ADDR (CSR_BASE + 0x0L)
#define CSR_ANALYZER_MUX_VALUE_SIZE 1
static inline uint32_t analyzer_mux_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void analyzer_mux_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_ANALYZER_TRIGGER_ENABLE_ADDR (CSR_BASE + 0x4L)
#define CSR_ANALYZER_TRIGGER_ENABLE_SIZE 1
static inline uint32_t analyzer_trigger_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void analyzer_trigger_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_ANALYZER_TRIGGER_DONE_ADDR (CSR_BASE + 0x8L)
#define CSR_ANALYZER_TRIGGER_DONE_SIZE 1
static inline uint32_t analyzer_trigger_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}
#define CSR_ANALYZER_TRIGGER_MEM_WRITE_ADDR (CSR_BASE + 0xcL)
#define CSR_ANALYZER_TRIGGER_MEM_WRITE_SIZE 1
static inline uint32_t analyzer_trigger_mem_write_read(void) {
	return csr_read_simple(CSR_BASE + 0xcL);
}
static inline void analyzer_trigger_mem_write_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0xcL);
}
#define CSR_ANALYZER_TRIGGER_MEM_MASK_ADDR (CSR_BASE + 0x10L)
#define CSR_ANALYZER_TRIGGER_MEM_MASK_SIZE 1
static inline uint32_t analyzer_trigger_mem_mask_read(void) {
	return csr_read_simple(CSR_BASE + 0x10L);
}
static inline void analyzer_trigger_mem_mask_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x10L);
}
#define CSR_ANALYZER_TRIGGER_MEM_VALUE_ADDR (CSR_BASE + 0x14L)
#define CSR_ANALYZER_TRIGGER_MEM_VALUE_SIZE 1
static inline uint32_t analyzer_trigger_mem_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x14L);
}
static inline void analyzer_trigger_mem_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x14L);
}
#define CSR_ANALYZER_TRIGGER_MEM_FULL_ADDR (CSR_BASE + 0x18L)
#define CSR_ANALYZER_TRIGGER_MEM_FULL_SIZE 1
static inline uint32_t analyzer_trigger_mem_full_read(void) {
	return csr_read_simple(CSR_BASE + 0x18L);
}
#define CSR_ANALYZER_SUBSAMPLER_VALUE_ADDR (CSR_BASE + 0x1cL)
#define CSR_ANALYZER_SUBSAMPLER_VALUE_SIZE 1
static inline uint32_t analyzer_subsampler_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x1cL);
}
static inline void analyzer_subsampler_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1cL);
}
#define CSR_ANALYZER_STORAGE_ENABLE_ADDR (CSR_BASE + 0x20L)
#define CSR_ANALYZER_STORAGE_ENABLE_SIZE 1
static inline uint32_t analyzer_storage_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x20L);
}
static inline void analyzer_storage_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x20L);
}
#define CSR_ANALYZER_STORAGE_DONE_ADDR (CSR_BASE + 0x24L)
#define CSR_ANALYZER_STORAGE_DONE_SIZE 1
static inline uint32_t analyzer_storage_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x24L);
}
#define CSR_ANALYZER_STORAGE_LENGTH_ADDR (CSR_BASE + 0x28L)
#define CSR_ANALYZER_STORAGE_LENGTH_SIZE 1
static inline uint32_t analyzer_storage_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x28L);
}
static inline void analyzer_storage_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x28L);
}
#define CSR_ANALYZER_STORAGE_OFFSET_ADDR (CSR_BASE + 0x2cL)
#define CSR_ANALYZER_STORAGE_OFFSET_SIZE 1
static inline uint32_t analyzer_storage_offset_read(void) {
	return csr_read_simple(CSR_BASE + 0x2cL);
}
static inline void analyzer_storage_offset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2cL);
}
#define CSR_ANALYZER_STORAGE_MEM_VALID_ADDR (CSR_BASE + 0x30L)
#define CSR_ANALYZER_STORAGE_MEM_VALID_SIZE 1
static inline uint32_t analyzer_storage_mem_valid_read(void) {
	return csr_read_simple(CSR_BASE + 0x30L);
}
#define CSR_ANALYZER_STORAGE_MEM_DATA_ADDR (CSR_BASE + 0x34L)
#define CSR_ANALYZER_STORAGE_MEM_DATA_SIZE 1
static inline uint32_t analyzer_storage_mem_data_read(void) {
	return csr_read_simple(CSR_BASE + 0x34L);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x804L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x804L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x808L);
}

#endif
