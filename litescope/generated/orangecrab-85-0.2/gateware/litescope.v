// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litescope.v
// Device     : LFE5U-85F-8MG285C
// LiteX sha1 : --------
// Date       : 2021-12-09 16:07:09
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litescope (
	input  wire clk_clksys,
	input  wire rst,
	output reg  uart_bridge_tx,
	input  wire uart_bridge_rx,
	input  wire [3:0] signals_data,
	input  wire signals_data_oe,
	input  wire signals_cmd,
	input  wire signals_cmd_oe,
	input  wire signals_clk,
	input  wire [7:0] signals_extra
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire sys_clk;
wire sys_rst;
reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
reg  bus_error = 1'd0;
reg  [31:0] bus_errors = 32'd0;
reg  tx_sink_valid = 1'd0;
reg  tx_sink_ready = 1'd0;
wire tx_sink_last;
reg  [7:0] tx_sink_payload_data = 8'd0;
reg  [7:0] tx_data = 8'd0;
reg  [3:0] tx_count = 4'd0;
reg  tx_enable = 1'd0;
reg  tx_tick = 1'd0;
reg  [31:0] tx_phase = 32'd0;
reg  rx_source_valid = 1'd0;
reg  rx_source_ready = 1'd0;
reg  [7:0] rx_source_payload_data = 8'd0;
reg  [7:0] rx_data = 8'd0;
reg  [3:0] rx_count = 4'd0;
reg  rx_enable = 1'd0;
reg  rx_tick = 1'd0;
reg  [31:0] rx_phase = 32'd0;
wire rx_rx;
reg  rx_rx_d = 1'd0;
wire [29:0] wishbone_adr;
wire [31:0] wishbone_dat_w;
wire [31:0] wishbone_dat_r;
wire [3:0] wishbone_sel;
reg  wishbone_cyc = 1'd0;
reg  wishbone_stb = 1'd0;
wire wishbone_ack;
reg  wishbone_we = 1'd0;
reg  [2:0] wishbone_cti = 3'd0;
reg  [1:0] wishbone_bte = 2'd0;
wire wishbone_err;
reg  [7:0] cmd = 8'd0;
reg  incr = 1'd0;
reg  [7:0] length = 8'd0;
reg  [31:0] address = 32'd0;
reg  [31:0] data = 32'd0;
reg  [1:0] bytes_count = 2'd0;
reg  [7:0] words_count = 8'd0;
wire reset;
wire wait_1;
wire done;
reg  [22:0] count = 23'd4800000;
reg  is_ongoing = 1'd0;
wire scope_clk;
reg  scope_rst = 1'd0;
wire analyzer_mux_valid;
reg  analyzer_mux_ready = 1'd0;
reg  analyzer_mux_first = 1'd0;
reg  analyzer_mux_last = 1'd0;
wire [15:0] analyzer_mux_payload_data;
reg  analyzer_mux_payload_hit = 1'd0;
reg  analyzer_mux_source_valid = 1'd0;
wire analyzer_mux_source_ready;
reg  analyzer_mux_source_first = 1'd0;
reg  analyzer_mux_source_last = 1'd0;
reg  [15:0] analyzer_mux_source_payload_data = 16'd0;
reg  analyzer_mux_source_payload_hit = 1'd0;
reg  analyzer_mux_value_storage = 1'd0;
reg  analyzer_mux_value_re = 1'd0;
wire analyzer_mux_value;
wire analyzer_trigger_sink_sink_valid;
wire analyzer_trigger_sink_sink_ready;
wire analyzer_trigger_sink_sink_first;
wire analyzer_trigger_sink_sink_last;
wire [15:0] analyzer_trigger_sink_sink_payload_data;
wire analyzer_trigger_sink_sink_payload_hit;
wire analyzer_trigger_source_source_valid;
wire analyzer_trigger_source_source_ready;
wire analyzer_trigger_source_source_first;
wire analyzer_trigger_source_source_last;
wire [15:0] analyzer_trigger_source_source_payload_data;
reg  analyzer_trigger_source_source_payload_hit = 1'd0;
reg  analyzer_trigger_enable_storage = 1'd0;
reg  analyzer_trigger_enable_re = 1'd0;
wire analyzer_trigger_done_status;
wire analyzer_trigger_done_we;
reg  analyzer_trigger_done_re = 1'd0;
reg  analyzer_trigger_mem_write_re = 1'd0;
wire analyzer_trigger_mem_write_r;
reg  analyzer_trigger_mem_write_we = 1'd0;
reg  analyzer_trigger_mem_write_w = 1'd0;
reg  [15:0] analyzer_trigger_mem_mask_storage = 16'd0;
reg  analyzer_trigger_mem_mask_re = 1'd0;
reg  [15:0] analyzer_trigger_mem_value_storage = 16'd0;
reg  analyzer_trigger_mem_value_re = 1'd0;
wire analyzer_trigger_mem_full_status;
wire analyzer_trigger_mem_full_we;
reg  analyzer_trigger_mem_full_re = 1'd0;
wire analyzer_trigger_enable;
reg  analyzer_trigger_enable_d = 1'd0;
wire analyzer_trigger_done0;
wire analyzer_trigger_mem_sink_valid;
wire analyzer_trigger_mem_sink_ready;
reg  analyzer_trigger_mem_sink_first = 1'd0;
reg  analyzer_trigger_mem_sink_last = 1'd0;
wire [15:0] analyzer_trigger_mem_sink_payload_mask;
wire [15:0] analyzer_trigger_mem_sink_payload_value;
wire analyzer_trigger_mem_source_valid;
wire analyzer_trigger_mem_source_ready;
wire analyzer_trigger_mem_source_first;
wire analyzer_trigger_mem_source_last;
wire [15:0] analyzer_trigger_mem_source_payload_mask;
wire [15:0] analyzer_trigger_mem_source_payload_value;
wire analyzer_trigger_mem_asyncfifo_we;
wire analyzer_trigger_mem_asyncfifo_writable;
wire analyzer_trigger_mem_asyncfifo_re;
wire analyzer_trigger_mem_asyncfifo_readable;
wire [33:0] analyzer_trigger_mem_asyncfifo_din;
wire [33:0] analyzer_trigger_mem_asyncfifo_dout;
wire analyzer_trigger_mem_graycounter0_ce;
reg  [4:0] analyzer_trigger_mem_graycounter0_q = 5'd0;
wire [4:0] analyzer_trigger_mem_graycounter0_q_next;
reg  [4:0] analyzer_trigger_mem_graycounter0_q_binary = 5'd0;
reg  [4:0] analyzer_trigger_mem_graycounter0_q_next_binary = 5'd0;
wire analyzer_trigger_mem_graycounter1_ce;
reg  [4:0] analyzer_trigger_mem_graycounter1_q = 5'd0;
wire [4:0] analyzer_trigger_mem_graycounter1_q_next;
reg  [4:0] analyzer_trigger_mem_graycounter1_q_binary = 5'd0;
reg  [4:0] analyzer_trigger_mem_graycounter1_q_next_binary = 5'd0;
wire [4:0] analyzer_trigger_mem_produce_rdomain;
wire [4:0] analyzer_trigger_mem_consume_wdomain;
wire [3:0] analyzer_trigger_mem_wrport_adr;
wire [33:0] analyzer_trigger_mem_wrport_dat_r;
wire analyzer_trigger_mem_wrport_we;
wire [33:0] analyzer_trigger_mem_wrport_dat_w;
wire [3:0] analyzer_trigger_mem_rdport_adr;
wire [33:0] analyzer_trigger_mem_rdport_dat_r;
wire [15:0] analyzer_trigger_mem_fifo_in_payload_mask;
wire [15:0] analyzer_trigger_mem_fifo_in_payload_value;
wire analyzer_trigger_mem_fifo_in_first;
wire analyzer_trigger_mem_fifo_in_last;
wire [15:0] analyzer_trigger_mem_fifo_out_payload_mask;
wire [15:0] analyzer_trigger_mem_fifo_out_payload_value;
wire analyzer_trigger_mem_fifo_out_first;
wire analyzer_trigger_mem_fifo_out_last;
wire analyzer_trigger_hit;
wire analyzer_trigger_wait;
wire analyzer_trigger_done1;
reg  [5:0] analyzer_trigger_count = 6'd32;
wire analyzer_subsampler_sink_valid;
wire analyzer_subsampler_sink_ready;
wire analyzer_subsampler_sink_first;
wire analyzer_subsampler_sink_last;
wire [15:0] analyzer_subsampler_sink_payload_data;
wire analyzer_subsampler_sink_payload_hit;
wire analyzer_subsampler_source_valid;
wire analyzer_subsampler_source_ready;
wire analyzer_subsampler_source_first;
wire analyzer_subsampler_source_last;
wire [15:0] analyzer_subsampler_source_payload_data;
wire analyzer_subsampler_source_payload_hit;
reg  [15:0] analyzer_subsampler_value_storage = 16'd0;
reg  analyzer_subsampler_value_re = 1'd0;
wire [15:0] analyzer_subsampler_value;
reg  [15:0] analyzer_subsampler_counter = 16'd0;
wire analyzer_subsampler_done;
wire analyzer_storage_sink_sink_valid;
reg  analyzer_storage_sink_sink_ready = 1'd0;
wire analyzer_storage_sink_sink_first;
wire analyzer_storage_sink_sink_last;
wire [15:0] analyzer_storage_sink_sink_payload_data;
wire analyzer_storage_sink_sink_payload_hit;
reg  analyzer_storage_enable_storage = 1'd0;
reg  analyzer_storage_enable_re = 1'd0;
wire analyzer_storage_done_status;
wire analyzer_storage_done_we;
reg  analyzer_storage_done_re = 1'd0;
reg  [11:0] analyzer_storage_length_storage = 12'd0;
reg  analyzer_storage_length_re = 1'd0;
reg  [11:0] analyzer_storage_offset_storage = 12'd0;
reg  analyzer_storage_offset_re = 1'd0;
wire analyzer_storage_mem_valid_status;
wire analyzer_storage_mem_valid_we;
reg  analyzer_storage_mem_valid_re = 1'd0;
wire [15:0] analyzer_storage_mem_data_status;
wire analyzer_storage_mem_data_we;
reg  analyzer_storage_mem_data_re = 1'd0;
wire analyzer_storage_enable;
reg  analyzer_storage_enable_d = 1'd0;
wire [11:0] analyzer_storage_length;
wire [11:0] analyzer_storage_offset;
reg  analyzer_storage_done0 = 1'd0;
reg  analyzer_storage_mem_sink_valid = 1'd0;
wire analyzer_storage_mem_sink_ready;
reg  analyzer_storage_mem_sink_first = 1'd0;
reg  analyzer_storage_mem_sink_last = 1'd0;
reg  [15:0] analyzer_storage_mem_sink_payload_data = 16'd0;
wire analyzer_storage_mem_source_valid;
reg  analyzer_storage_mem_source_ready = 1'd0;
wire analyzer_storage_mem_source_first;
wire analyzer_storage_mem_source_last;
wire [15:0] analyzer_storage_mem_source_payload_data;
wire analyzer_storage_mem_re;
reg  analyzer_storage_mem_readable = 1'd0;
wire analyzer_storage_mem_syncfifo_we;
wire analyzer_storage_mem_syncfifo_writable;
wire analyzer_storage_mem_syncfifo_re;
wire analyzer_storage_mem_syncfifo_readable;
wire [17:0] analyzer_storage_mem_syncfifo_din;
wire [17:0] analyzer_storage_mem_syncfifo_dout;
reg  [11:0] analyzer_storage_mem_level0 = 12'd0;
reg  analyzer_storage_mem_replace = 1'd0;
reg  [10:0] analyzer_storage_mem_produce = 11'd0;
reg  [10:0] analyzer_storage_mem_consume = 11'd0;
reg  [10:0] analyzer_storage_mem_wrport_adr = 11'd0;
wire [17:0] analyzer_storage_mem_wrport_dat_r;
wire analyzer_storage_mem_wrport_we;
wire [17:0] analyzer_storage_mem_wrport_dat_w;
wire analyzer_storage_mem_do_read;
wire [10:0] analyzer_storage_mem_rdport_adr;
wire [17:0] analyzer_storage_mem_rdport_dat_r;
wire analyzer_storage_mem_rdport_re;
wire [11:0] analyzer_storage_mem_level1;
wire [15:0] analyzer_storage_mem_fifo_in_payload_data;
wire analyzer_storage_mem_fifo_in_first;
wire analyzer_storage_mem_fifo_in_last;
wire [15:0] analyzer_storage_mem_fifo_out_payload_data;
wire analyzer_storage_mem_fifo_out_first;
wire analyzer_storage_mem_fifo_out_last;
reg  analyzer_storage_cdc_sink_valid = 1'd0;
wire analyzer_storage_cdc_sink_ready;
reg  analyzer_storage_cdc_sink_first = 1'd0;
reg  analyzer_storage_cdc_sink_last = 1'd0;
reg  [15:0] analyzer_storage_cdc_sink_payload_data = 16'd0;
wire analyzer_storage_cdc_source_valid;
wire analyzer_storage_cdc_source_ready;
wire analyzer_storage_cdc_source_first;
wire analyzer_storage_cdc_source_last;
wire [15:0] analyzer_storage_cdc_source_payload_data;
wire analyzer_storage_cdc_asyncfifo_we;
wire analyzer_storage_cdc_asyncfifo_writable;
wire analyzer_storage_cdc_asyncfifo_re;
wire analyzer_storage_cdc_asyncfifo_readable;
wire [17:0] analyzer_storage_cdc_asyncfifo_din;
wire [17:0] analyzer_storage_cdc_asyncfifo_dout;
wire analyzer_storage_cdc_graycounter0_ce;
reg  [2:0] analyzer_storage_cdc_graycounter0_q = 3'd0;
wire [2:0] analyzer_storage_cdc_graycounter0_q_next;
reg  [2:0] analyzer_storage_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] analyzer_storage_cdc_graycounter0_q_next_binary = 3'd0;
wire analyzer_storage_cdc_graycounter1_ce;
reg  [2:0] analyzer_storage_cdc_graycounter1_q = 3'd0;
wire [2:0] analyzer_storage_cdc_graycounter1_q_next;
reg  [2:0] analyzer_storage_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] analyzer_storage_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] analyzer_storage_cdc_produce_rdomain;
wire [2:0] analyzer_storage_cdc_consume_wdomain;
wire [1:0] analyzer_storage_cdc_wrport_adr;
wire [17:0] analyzer_storage_cdc_wrport_dat_r;
wire analyzer_storage_cdc_wrport_we;
wire [17:0] analyzer_storage_cdc_wrport_dat_w;
wire [1:0] analyzer_storage_cdc_rdport_adr;
wire [17:0] analyzer_storage_cdc_rdport_dat_r;
wire [15:0] analyzer_storage_cdc_fifo_in_payload_data;
wire analyzer_storage_cdc_fifo_in_first;
wire analyzer_storage_cdc_fifo_in_last;
wire [15:0] analyzer_storage_cdc_fifo_out_payload_data;
wire analyzer_storage_cdc_fifo_out_first;
wire analyzer_storage_cdc_fifo_out_last;
reg  analyzer_storage_wait = 1'd0;
wire analyzer_storage_done1;
reg  [11:0] analyzer_storage_count = 12'd2048;
reg  rs232phytx_state = 1'd0;
reg  rs232phytx_next_state = 1'd0;
reg  [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg  tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  uart_bridge_tx_rs232phytx_next_value1 = 1'd0;
reg  uart_bridge_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg  tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  rs232phyrx_state = 1'd0;
reg  rs232phyrx_next_state = 1'd0;
reg  [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg  rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg  rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [2:0] uartbone_state = 3'd0;
reg  [2:0] uartbone_next_state = 3'd0;
reg  [1:0] bytes_count_next_value0 = 2'd0;
reg  bytes_count_next_value_ce0 = 1'd0;
reg  [7:0] words_count_next_value1 = 8'd0;
reg  words_count_next_value_ce1 = 1'd0;
reg  [7:0] cmd_next_value2 = 8'd0;
reg  cmd_next_value_ce2 = 1'd0;
reg  [7:0] length_next_value3 = 8'd0;
reg  length_next_value_ce3 = 1'd0;
reg  [31:0] address_next_value4 = 32'd0;
reg  address_next_value_ce4 = 1'd0;
reg  incr_next_value5 = 1'd0;
reg  incr_next_value_ce5 = 1'd0;
reg  [31:0] data_next_value6 = 32'd0;
reg  data_next_value_ce6 = 1'd0;
reg  [1:0] litescopeanalyzer_state = 2'd0;
reg  [1:0] litescopeanalyzer_next_state = 2'd0;
reg  [13:0] basesoc_adr = 14'd0;
reg  basesoc_we = 1'd0;
reg  [31:0] basesoc_dat_w = 32'd0;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
reg  [31:0] basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg  basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg  basesoc_wishbone_err = 1'd0;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg  [31:0] interface0_bank_bus_dat_r = 32'd0;
reg  csrbank0_mux_value0_re = 1'd0;
wire csrbank0_mux_value0_r;
reg  csrbank0_mux_value0_we = 1'd0;
wire csrbank0_mux_value0_w;
reg  csrbank0_trigger_enable0_re = 1'd0;
wire csrbank0_trigger_enable0_r;
reg  csrbank0_trigger_enable0_we = 1'd0;
wire csrbank0_trigger_enable0_w;
reg  csrbank0_trigger_done_re = 1'd0;
wire csrbank0_trigger_done_r;
reg  csrbank0_trigger_done_we = 1'd0;
wire csrbank0_trigger_done_w;
reg  csrbank0_trigger_mem_mask0_re = 1'd0;
wire [15:0] csrbank0_trigger_mem_mask0_r;
reg  csrbank0_trigger_mem_mask0_we = 1'd0;
wire [15:0] csrbank0_trigger_mem_mask0_w;
reg  csrbank0_trigger_mem_value0_re = 1'd0;
wire [15:0] csrbank0_trigger_mem_value0_r;
reg  csrbank0_trigger_mem_value0_we = 1'd0;
wire [15:0] csrbank0_trigger_mem_value0_w;
reg  csrbank0_trigger_mem_full_re = 1'd0;
wire csrbank0_trigger_mem_full_r;
reg  csrbank0_trigger_mem_full_we = 1'd0;
wire csrbank0_trigger_mem_full_w;
reg  csrbank0_subsampler_value0_re = 1'd0;
wire [15:0] csrbank0_subsampler_value0_r;
reg  csrbank0_subsampler_value0_we = 1'd0;
wire [15:0] csrbank0_subsampler_value0_w;
reg  csrbank0_storage_enable0_re = 1'd0;
wire csrbank0_storage_enable0_r;
reg  csrbank0_storage_enable0_we = 1'd0;
wire csrbank0_storage_enable0_w;
reg  csrbank0_storage_done_re = 1'd0;
wire csrbank0_storage_done_r;
reg  csrbank0_storage_done_we = 1'd0;
wire csrbank0_storage_done_w;
reg  csrbank0_storage_length0_re = 1'd0;
wire [11:0] csrbank0_storage_length0_r;
reg  csrbank0_storage_length0_we = 1'd0;
wire [11:0] csrbank0_storage_length0_w;
reg  csrbank0_storage_offset0_re = 1'd0;
wire [11:0] csrbank0_storage_offset0_r;
reg  csrbank0_storage_offset0_we = 1'd0;
wire [11:0] csrbank0_storage_offset0_w;
reg  csrbank0_storage_mem_valid_re = 1'd0;
wire csrbank0_storage_mem_valid_r;
reg  csrbank0_storage_mem_valid_we = 1'd0;
wire csrbank0_storage_mem_valid_w;
reg  csrbank0_storage_mem_data_re = 1'd0;
wire [15:0] csrbank0_storage_mem_data_r;
reg  csrbank0_storage_mem_data_we = 1'd0;
wire [15:0] csrbank0_storage_mem_data_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg  [31:0] interface1_bank_bus_dat_r = 32'd0;
reg  csrbank1_reset0_re = 1'd0;
wire [1:0] csrbank1_reset0_r;
reg  csrbank1_reset0_we = 1'd0;
wire [1:0] csrbank1_reset0_w;
reg  csrbank1_scratch0_re = 1'd0;
wire [31:0] csrbank1_scratch0_r;
reg  csrbank1_scratch0_we = 1'd0;
wire [31:0] csrbank1_scratch0_w;
reg  csrbank1_bus_errors_re = 1'd0;
wire [31:0] csrbank1_bus_errors_r;
reg  csrbank1_bus_errors_we = 1'd0;
wire [31:0] csrbank1_bus_errors_w;
wire csrbank1_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg  state = 1'd0;
reg  next_state = 1'd0;
reg  multiregimpl0_regs0 = 1'd0;
reg  multiregimpl0_regs1 = 1'd0;
reg  multiregimpl1_regs0 = 1'd0;
reg  multiregimpl1_regs1 = 1'd0;
reg  multiregimpl2_regs0 = 1'd0;
reg  multiregimpl2_regs1 = 1'd0;
reg  multiregimpl3_regs0 = 1'd0;
reg  multiregimpl3_regs1 = 1'd0;
reg  [4:0] multiregimpl4_regs0 = 5'd0;
reg  [4:0] multiregimpl4_regs1 = 5'd0;
reg  [4:0] multiregimpl5_regs0 = 5'd0;
reg  [4:0] multiregimpl5_regs1 = 5'd0;
reg  [15:0] multiregimpl6_regs0 = 16'd0;
reg  [15:0] multiregimpl6_regs1 = 16'd0;
reg  multiregimpl7_regs0 = 1'd0;
reg  multiregimpl7_regs1 = 1'd0;
reg  [11:0] multiregimpl8_regs0 = 12'd0;
reg  [11:0] multiregimpl8_regs1 = 12'd0;
reg  [11:0] multiregimpl9_regs0 = 12'd0;
reg  [11:0] multiregimpl9_regs1 = 12'd0;
reg  multiregimpl10_regs0 = 1'd0;
reg  multiregimpl10_regs1 = 1'd0;
reg  [2:0] multiregimpl11_regs0 = 3'd0;
reg  [2:0] multiregimpl11_regs1 = 3'd0;
reg  [2:0] multiregimpl12_regs0 = 3'd0;
reg  [2:0] multiregimpl12_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk_clksys;
assign sys_rst = rst;
assign bus_errors_status = bus_errors;
always @(*) begin
	tx_enable <= 1'd0;
	rs232phytx_next_state <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	uart_bridge_tx_rs232phytx_next_value1 <= 1'd0;
	uart_bridge_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_sink_ready <= 1'd0;
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	rs232phytx_next_state <= rs232phytx_state;
	case (rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				uart_bridge_tx_rs232phytx_next_value1 <= tx_data;
				uart_bridge_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			uart_bridge_tx_rs232phytx_next_value1 <= 1'd1;
			uart_bridge_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				uart_bridge_tx_rs232phytx_next_value1 <= 1'd0;
				uart_bridge_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_source_payload_data <= 8'd0;
	rx_enable <= 1'd0;
	rs232phyrx_next_state <= 1'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	rx_source_valid <= 1'd0;
	rs232phyrx_next_state <= rs232phyrx_state;
	case (rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign wait_1 = (~is_ongoing);
assign reset = done;
assign wishbone_adr = address;
assign wishbone_dat_w = data;
assign wishbone_sel = 4'd15;
always @(*) begin
	tx_sink_payload_data <= 8'd0;
	case (bytes_count)
		1'd0: begin
			tx_sink_payload_data <= data[31:24];
		end
		1'd1: begin
			tx_sink_payload_data <= data[31:16];
		end
		2'd2: begin
			tx_sink_payload_data <= data[31:8];
		end
		2'd3: begin
			tx_sink_payload_data <= data[31:0];
		end
	endcase
end
assign tx_sink_last = ((bytes_count == 2'd3) & (words_count == (length - 1'd1)));
always @(*) begin
	address_next_value4 <= 32'd0;
	address_next_value_ce4 <= 1'd0;
	incr_next_value5 <= 1'd0;
	wishbone_cyc <= 1'd0;
	incr_next_value_ce5 <= 1'd0;
	wishbone_stb <= 1'd0;
	wishbone_we <= 1'd0;
	data_next_value6 <= 32'd0;
	data_next_value_ce6 <= 1'd0;
	rx_source_ready <= 1'd0;
	uartbone_next_state <= 3'd0;
	bytes_count_next_value0 <= 2'd0;
	bytes_count_next_value_ce0 <= 1'd0;
	words_count_next_value1 <= 8'd0;
	words_count_next_value_ce1 <= 1'd0;
	cmd_next_value2 <= 8'd0;
	tx_sink_valid <= 1'd0;
	cmd_next_value_ce2 <= 1'd0;
	is_ongoing <= 1'd0;
	length_next_value3 <= 8'd0;
	length_next_value_ce3 <= 1'd0;
	uartbone_next_state <= uartbone_state;
	case (uartbone_state)
		1'd1: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				length_next_value3 <= rx_source_payload_data;
				length_next_value_ce3 <= 1'd1;
				uartbone_next_state <= 2'd2;
			end
		end
		2'd2: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				address_next_value4 <= {address, rx_source_payload_data};
				address_next_value_ce4 <= 1'd1;
				bytes_count_next_value0 <= (bytes_count + 1'd1);
				bytes_count_next_value_ce0 <= 1'd1;
				if ((bytes_count == 2'd3)) begin
					if (((cmd == 1'd1) | (cmd == 2'd3))) begin
						incr_next_value5 <= (cmd == 1'd1);
						incr_next_value_ce5 <= 1'd1;
						uartbone_next_state <= 2'd3;
					end else begin
						if (((cmd == 2'd2) | (cmd == 3'd4))) begin
							incr_next_value5 <= (cmd == 2'd2);
							incr_next_value_ce5 <= 1'd1;
							uartbone_next_state <= 3'd5;
						end else begin
							uartbone_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				data_next_value6 <= {data, rx_source_payload_data};
				data_next_value_ce6 <= 1'd1;
				bytes_count_next_value0 <= (bytes_count + 1'd1);
				bytes_count_next_value_ce0 <= 1'd1;
				if ((bytes_count == 2'd3)) begin
					uartbone_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			rx_source_ready <= 1'd0;
			wishbone_stb <= 1'd1;
			wishbone_we <= 1'd1;
			wishbone_cyc <= 1'd1;
			if (wishbone_ack) begin
				words_count_next_value1 <= (words_count + 1'd1);
				words_count_next_value_ce1 <= 1'd1;
				address_next_value4 <= (address + incr);
				address_next_value_ce4 <= 1'd1;
				if ((words_count == (length - 1'd1))) begin
					uartbone_next_state <= 1'd0;
				end else begin
					uartbone_next_state <= 2'd3;
				end
			end
		end
		3'd5: begin
			rx_source_ready <= 1'd0;
			wishbone_stb <= 1'd1;
			wishbone_we <= 1'd0;
			wishbone_cyc <= 1'd1;
			if (wishbone_ack) begin
				data_next_value6 <= wishbone_dat_r;
				data_next_value_ce6 <= 1'd1;
				uartbone_next_state <= 3'd6;
			end
		end
		3'd6: begin
			rx_source_ready <= 1'd0;
			tx_sink_valid <= 1'd1;
			if (tx_sink_ready) begin
				bytes_count_next_value0 <= (bytes_count + 1'd1);
				bytes_count_next_value_ce0 <= 1'd1;
				if ((bytes_count == 2'd3)) begin
					words_count_next_value1 <= (words_count + 1'd1);
					words_count_next_value_ce1 <= 1'd1;
					address_next_value4 <= (address + incr);
					address_next_value_ce4 <= 1'd1;
					if ((words_count == (length - 1'd1))) begin
						uartbone_next_state <= 1'd0;
					end else begin
						uartbone_next_state <= 3'd5;
					end
				end
			end
		end
		default: begin
			is_ongoing <= 1'd1;
			rx_source_ready <= 1'd1;
			bytes_count_next_value0 <= 1'd0;
			bytes_count_next_value_ce0 <= 1'd1;
			words_count_next_value1 <= 1'd0;
			words_count_next_value_ce1 <= 1'd1;
			if (rx_source_valid) begin
				cmd_next_value2 <= rx_source_payload_data;
				cmd_next_value_ce2 <= 1'd1;
				uartbone_next_state <= 1'd1;
			end
		end
	endcase
end
assign done = (count == 1'd0);
assign scope_clk = sys_clk;
assign analyzer_mux_valid = 1'd1;
assign analyzer_mux_payload_data = {signals_extra, signals_clk, signals_cmd_oe, signals_cmd, signals_data_oe, signals_data};
always @(*) begin
	analyzer_mux_source_first <= 1'd0;
	analyzer_mux_ready <= 1'd0;
	analyzer_mux_source_last <= 1'd0;
	analyzer_mux_source_payload_data <= 16'd0;
	analyzer_mux_source_payload_hit <= 1'd0;
	analyzer_mux_source_valid <= 1'd0;
	case (analyzer_mux_value)
		1'd0: begin
			analyzer_mux_source_valid <= analyzer_mux_valid;
			analyzer_mux_ready <= analyzer_mux_source_ready;
			analyzer_mux_source_first <= analyzer_mux_first;
			analyzer_mux_source_last <= analyzer_mux_last;
			analyzer_mux_source_payload_data <= analyzer_mux_payload_data;
			analyzer_mux_source_payload_hit <= analyzer_mux_payload_hit;
		end
	endcase
end
assign analyzer_trigger_mem_sink_valid = analyzer_trigger_mem_write_re;
assign analyzer_trigger_mem_sink_payload_mask = analyzer_trigger_mem_mask_storage;
assign analyzer_trigger_mem_sink_payload_value = analyzer_trigger_mem_value_storage;
assign analyzer_trigger_mem_full_status = (~analyzer_trigger_mem_sink_ready);
assign analyzer_trigger_wait = (~((~analyzer_trigger_enable) & analyzer_trigger_enable_d));
assign analyzer_trigger_hit = ((analyzer_trigger_sink_sink_payload_data & analyzer_trigger_mem_source_payload_mask) == (analyzer_trigger_mem_source_payload_value & analyzer_trigger_mem_source_payload_mask));
assign analyzer_trigger_mem_source_ready = ((analyzer_trigger_enable & analyzer_trigger_hit) | (~analyzer_trigger_done1));
assign analyzer_trigger_source_source_valid = analyzer_trigger_sink_sink_valid;
assign analyzer_trigger_sink_sink_ready = analyzer_trigger_source_source_ready;
assign analyzer_trigger_source_source_first = analyzer_trigger_sink_sink_first;
assign analyzer_trigger_source_source_last = analyzer_trigger_sink_sink_last;
assign analyzer_trigger_source_source_payload_data = analyzer_trigger_sink_sink_payload_data;
assign analyzer_trigger_done0 = (~analyzer_trigger_mem_source_valid);
always @(*) begin
	analyzer_trigger_source_source_payload_hit <= 1'd0;
	analyzer_trigger_source_source_payload_hit <= analyzer_trigger_sink_sink_payload_hit;
	analyzer_trigger_source_source_payload_hit <= analyzer_trigger_done0;
end
assign analyzer_trigger_mem_asyncfifo_din = {analyzer_trigger_mem_fifo_in_last, analyzer_trigger_mem_fifo_in_first, analyzer_trigger_mem_fifo_in_payload_value, analyzer_trigger_mem_fifo_in_payload_mask};
assign {analyzer_trigger_mem_fifo_out_last, analyzer_trigger_mem_fifo_out_first, analyzer_trigger_mem_fifo_out_payload_value, analyzer_trigger_mem_fifo_out_payload_mask} = analyzer_trigger_mem_asyncfifo_dout;
assign analyzer_trigger_mem_sink_ready = analyzer_trigger_mem_asyncfifo_writable;
assign analyzer_trigger_mem_asyncfifo_we = analyzer_trigger_mem_sink_valid;
assign analyzer_trigger_mem_fifo_in_first = analyzer_trigger_mem_sink_first;
assign analyzer_trigger_mem_fifo_in_last = analyzer_trigger_mem_sink_last;
assign analyzer_trigger_mem_fifo_in_payload_mask = analyzer_trigger_mem_sink_payload_mask;
assign analyzer_trigger_mem_fifo_in_payload_value = analyzer_trigger_mem_sink_payload_value;
assign analyzer_trigger_mem_source_valid = analyzer_trigger_mem_asyncfifo_readable;
assign analyzer_trigger_mem_source_first = analyzer_trigger_mem_fifo_out_first;
assign analyzer_trigger_mem_source_last = analyzer_trigger_mem_fifo_out_last;
assign analyzer_trigger_mem_source_payload_mask = analyzer_trigger_mem_fifo_out_payload_mask;
assign analyzer_trigger_mem_source_payload_value = analyzer_trigger_mem_fifo_out_payload_value;
assign analyzer_trigger_mem_asyncfifo_re = analyzer_trigger_mem_source_ready;
assign analyzer_trigger_mem_graycounter0_ce = (analyzer_trigger_mem_asyncfifo_writable & analyzer_trigger_mem_asyncfifo_we);
assign analyzer_trigger_mem_graycounter1_ce = (analyzer_trigger_mem_asyncfifo_readable & analyzer_trigger_mem_asyncfifo_re);
assign analyzer_trigger_mem_asyncfifo_writable = (((analyzer_trigger_mem_graycounter0_q[4] == analyzer_trigger_mem_consume_wdomain[4]) | (analyzer_trigger_mem_graycounter0_q[3] == analyzer_trigger_mem_consume_wdomain[3])) | (analyzer_trigger_mem_graycounter0_q[2:0] != analyzer_trigger_mem_consume_wdomain[2:0]));
assign analyzer_trigger_mem_asyncfifo_readable = (analyzer_trigger_mem_graycounter1_q != analyzer_trigger_mem_produce_rdomain);
assign analyzer_trigger_mem_wrport_adr = analyzer_trigger_mem_graycounter0_q_binary[3:0];
assign analyzer_trigger_mem_wrport_dat_w = analyzer_trigger_mem_asyncfifo_din;
assign analyzer_trigger_mem_wrport_we = analyzer_trigger_mem_graycounter0_ce;
assign analyzer_trigger_mem_rdport_adr = analyzer_trigger_mem_graycounter1_q_next_binary[3:0];
assign analyzer_trigger_mem_asyncfifo_dout = analyzer_trigger_mem_rdport_dat_r;
always @(*) begin
	analyzer_trigger_mem_graycounter0_q_next_binary <= 5'd0;
	if (analyzer_trigger_mem_graycounter0_ce) begin
		analyzer_trigger_mem_graycounter0_q_next_binary <= (analyzer_trigger_mem_graycounter0_q_binary + 1'd1);
	end else begin
		analyzer_trigger_mem_graycounter0_q_next_binary <= analyzer_trigger_mem_graycounter0_q_binary;
	end
end
assign analyzer_trigger_mem_graycounter0_q_next = (analyzer_trigger_mem_graycounter0_q_next_binary ^ analyzer_trigger_mem_graycounter0_q_next_binary[4:1]);
always @(*) begin
	analyzer_trigger_mem_graycounter1_q_next_binary <= 5'd0;
	if (analyzer_trigger_mem_graycounter1_ce) begin
		analyzer_trigger_mem_graycounter1_q_next_binary <= (analyzer_trigger_mem_graycounter1_q_binary + 1'd1);
	end else begin
		analyzer_trigger_mem_graycounter1_q_next_binary <= analyzer_trigger_mem_graycounter1_q_binary;
	end
end
assign analyzer_trigger_mem_graycounter1_q_next = (analyzer_trigger_mem_graycounter1_q_next_binary ^ analyzer_trigger_mem_graycounter1_q_next_binary[4:1]);
assign analyzer_trigger_done1 = (analyzer_trigger_count == 1'd0);
assign analyzer_subsampler_done = (analyzer_subsampler_counter == analyzer_subsampler_value);
assign analyzer_subsampler_sink_ready = analyzer_subsampler_source_ready;
assign analyzer_subsampler_source_first = analyzer_subsampler_sink_first;
assign analyzer_subsampler_source_last = analyzer_subsampler_sink_last;
assign analyzer_subsampler_source_payload_data = analyzer_subsampler_sink_payload_data;
assign analyzer_subsampler_source_payload_hit = analyzer_subsampler_sink_payload_hit;
assign analyzer_subsampler_source_valid = (analyzer_subsampler_sink_valid & analyzer_subsampler_done);
assign analyzer_storage_mem_valid_status = analyzer_storage_cdc_source_valid;
assign analyzer_storage_cdc_source_ready = (analyzer_storage_mem_data_we | (~analyzer_storage_enable_storage));
assign analyzer_storage_mem_data_status = analyzer_storage_cdc_source_payload_data;
assign analyzer_storage_mem_syncfifo_din = {analyzer_storage_mem_fifo_in_last, analyzer_storage_mem_fifo_in_first, analyzer_storage_mem_fifo_in_payload_data};
assign {analyzer_storage_mem_fifo_out_last, analyzer_storage_mem_fifo_out_first, analyzer_storage_mem_fifo_out_payload_data} = analyzer_storage_mem_syncfifo_dout;
assign analyzer_storage_mem_sink_ready = analyzer_storage_mem_syncfifo_writable;
assign analyzer_storage_mem_syncfifo_we = analyzer_storage_mem_sink_valid;
assign analyzer_storage_mem_fifo_in_first = analyzer_storage_mem_sink_first;
assign analyzer_storage_mem_fifo_in_last = analyzer_storage_mem_sink_last;
assign analyzer_storage_mem_fifo_in_payload_data = analyzer_storage_mem_sink_payload_data;
assign analyzer_storage_mem_source_valid = analyzer_storage_mem_readable;
assign analyzer_storage_mem_source_first = analyzer_storage_mem_fifo_out_first;
assign analyzer_storage_mem_source_last = analyzer_storage_mem_fifo_out_last;
assign analyzer_storage_mem_source_payload_data = analyzer_storage_mem_fifo_out_payload_data;
assign analyzer_storage_mem_re = analyzer_storage_mem_source_ready;
assign analyzer_storage_mem_syncfifo_re = (analyzer_storage_mem_syncfifo_readable & ((~analyzer_storage_mem_readable) | analyzer_storage_mem_re));
assign analyzer_storage_mem_level1 = (analyzer_storage_mem_level0 + analyzer_storage_mem_readable);
always @(*) begin
	analyzer_storage_mem_wrport_adr <= 11'd0;
	if (analyzer_storage_mem_replace) begin
		analyzer_storage_mem_wrport_adr <= (analyzer_storage_mem_produce - 1'd1);
	end else begin
		analyzer_storage_mem_wrport_adr <= analyzer_storage_mem_produce;
	end
end
assign analyzer_storage_mem_wrport_dat_w = analyzer_storage_mem_syncfifo_din;
assign analyzer_storage_mem_wrport_we = (analyzer_storage_mem_syncfifo_we & (analyzer_storage_mem_syncfifo_writable | analyzer_storage_mem_replace));
assign analyzer_storage_mem_do_read = (analyzer_storage_mem_syncfifo_readable & analyzer_storage_mem_syncfifo_re);
assign analyzer_storage_mem_rdport_adr = analyzer_storage_mem_consume;
assign analyzer_storage_mem_syncfifo_dout = analyzer_storage_mem_rdport_dat_r;
assign analyzer_storage_mem_rdport_re = analyzer_storage_mem_do_read;
assign analyzer_storage_mem_syncfifo_writable = (analyzer_storage_mem_level0 != 12'd2048);
assign analyzer_storage_mem_syncfifo_readable = (analyzer_storage_mem_level0 != 1'd0);
assign analyzer_storage_cdc_asyncfifo_din = {analyzer_storage_cdc_fifo_in_last, analyzer_storage_cdc_fifo_in_first, analyzer_storage_cdc_fifo_in_payload_data};
assign {analyzer_storage_cdc_fifo_out_last, analyzer_storage_cdc_fifo_out_first, analyzer_storage_cdc_fifo_out_payload_data} = analyzer_storage_cdc_asyncfifo_dout;
assign analyzer_storage_cdc_sink_ready = analyzer_storage_cdc_asyncfifo_writable;
assign analyzer_storage_cdc_asyncfifo_we = analyzer_storage_cdc_sink_valid;
assign analyzer_storage_cdc_fifo_in_first = analyzer_storage_cdc_sink_first;
assign analyzer_storage_cdc_fifo_in_last = analyzer_storage_cdc_sink_last;
assign analyzer_storage_cdc_fifo_in_payload_data = analyzer_storage_cdc_sink_payload_data;
assign analyzer_storage_cdc_source_valid = analyzer_storage_cdc_asyncfifo_readable;
assign analyzer_storage_cdc_source_first = analyzer_storage_cdc_fifo_out_first;
assign analyzer_storage_cdc_source_last = analyzer_storage_cdc_fifo_out_last;
assign analyzer_storage_cdc_source_payload_data = analyzer_storage_cdc_fifo_out_payload_data;
assign analyzer_storage_cdc_asyncfifo_re = analyzer_storage_cdc_source_ready;
assign analyzer_storage_cdc_graycounter0_ce = (analyzer_storage_cdc_asyncfifo_writable & analyzer_storage_cdc_asyncfifo_we);
assign analyzer_storage_cdc_graycounter1_ce = (analyzer_storage_cdc_asyncfifo_readable & analyzer_storage_cdc_asyncfifo_re);
assign analyzer_storage_cdc_asyncfifo_writable = (((analyzer_storage_cdc_graycounter0_q[2] == analyzer_storage_cdc_consume_wdomain[2]) | (analyzer_storage_cdc_graycounter0_q[1] == analyzer_storage_cdc_consume_wdomain[1])) | (analyzer_storage_cdc_graycounter0_q[0] != analyzer_storage_cdc_consume_wdomain[0]));
assign analyzer_storage_cdc_asyncfifo_readable = (analyzer_storage_cdc_graycounter1_q != analyzer_storage_cdc_produce_rdomain);
assign analyzer_storage_cdc_wrport_adr = analyzer_storage_cdc_graycounter0_q_binary[1:0];
assign analyzer_storage_cdc_wrport_dat_w = analyzer_storage_cdc_asyncfifo_din;
assign analyzer_storage_cdc_wrport_we = analyzer_storage_cdc_graycounter0_ce;
assign analyzer_storage_cdc_rdport_adr = analyzer_storage_cdc_graycounter1_q_next_binary[1:0];
assign analyzer_storage_cdc_asyncfifo_dout = analyzer_storage_cdc_rdport_dat_r;
always @(*) begin
	analyzer_storage_cdc_graycounter0_q_next_binary <= 3'd0;
	if (analyzer_storage_cdc_graycounter0_ce) begin
		analyzer_storage_cdc_graycounter0_q_next_binary <= (analyzer_storage_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		analyzer_storage_cdc_graycounter0_q_next_binary <= analyzer_storage_cdc_graycounter0_q_binary;
	end
end
assign analyzer_storage_cdc_graycounter0_q_next = (analyzer_storage_cdc_graycounter0_q_next_binary ^ analyzer_storage_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	analyzer_storage_cdc_graycounter1_q_next_binary <= 3'd0;
	if (analyzer_storage_cdc_graycounter1_ce) begin
		analyzer_storage_cdc_graycounter1_q_next_binary <= (analyzer_storage_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		analyzer_storage_cdc_graycounter1_q_next_binary <= analyzer_storage_cdc_graycounter1_q_binary;
	end
end
assign analyzer_storage_cdc_graycounter1_q_next = (analyzer_storage_cdc_graycounter1_q_next_binary ^ analyzer_storage_cdc_graycounter1_q_next_binary[2:1]);
assign analyzer_storage_done1 = (analyzer_storage_count == 1'd0);
always @(*) begin
	analyzer_storage_cdc_sink_first <= 1'd0;
	analyzer_storage_done0 <= 1'd0;
	analyzer_storage_cdc_sink_last <= 1'd0;
	analyzer_storage_cdc_sink_payload_data <= 16'd0;
	analyzer_storage_sink_sink_ready <= 1'd0;
	analyzer_storage_mem_sink_valid <= 1'd0;
	analyzer_storage_mem_sink_first <= 1'd0;
	analyzer_storage_mem_sink_last <= 1'd0;
	analyzer_storage_wait <= 1'd0;
	analyzer_storage_mem_sink_payload_data <= 16'd0;
	analyzer_storage_mem_source_ready <= 1'd0;
	litescopeanalyzer_next_state <= 2'd0;
	analyzer_storage_cdc_sink_valid <= 1'd0;
	litescopeanalyzer_next_state <= litescopeanalyzer_state;
	case (litescopeanalyzer_state)
		1'd1: begin
			analyzer_storage_sink_sink_ready <= 1'd1;
			analyzer_storage_wait <= 1'd1;
			analyzer_storage_mem_source_ready <= 1'd1;
			if (analyzer_storage_done1) begin
				litescopeanalyzer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			analyzer_storage_mem_sink_valid <= analyzer_storage_sink_sink_valid;
			analyzer_storage_sink_sink_ready <= analyzer_storage_mem_sink_ready;
			analyzer_storage_mem_sink_first <= analyzer_storage_sink_sink_first;
			analyzer_storage_mem_sink_last <= analyzer_storage_sink_sink_last;
			analyzer_storage_mem_sink_payload_data <= analyzer_storage_sink_sink_payload_data;
			if ((analyzer_storage_sink_sink_valid & analyzer_storage_sink_sink_payload_hit)) begin
				litescopeanalyzer_next_state <= 2'd3;
			end
			analyzer_storage_mem_source_ready <= (analyzer_storage_mem_level1 >= analyzer_storage_offset);
		end
		2'd3: begin
			analyzer_storage_mem_sink_valid <= analyzer_storage_sink_sink_valid;
			analyzer_storage_sink_sink_ready <= analyzer_storage_mem_sink_ready;
			analyzer_storage_mem_sink_first <= analyzer_storage_sink_sink_first;
			analyzer_storage_mem_sink_last <= analyzer_storage_sink_sink_last;
			analyzer_storage_mem_sink_payload_data <= analyzer_storage_sink_sink_payload_data;
			if ((analyzer_storage_mem_level1 >= analyzer_storage_length)) begin
				litescopeanalyzer_next_state <= 1'd0;
			end
		end
		default: begin
			analyzer_storage_done0 <= 1'd1;
			if ((analyzer_storage_enable & (~analyzer_storage_enable_d))) begin
				litescopeanalyzer_next_state <= 1'd1;
			end
			analyzer_storage_sink_sink_ready <= 1'd1;
			analyzer_storage_cdc_sink_valid <= analyzer_storage_mem_source_valid;
			analyzer_storage_mem_source_ready <= analyzer_storage_cdc_sink_ready;
			analyzer_storage_cdc_sink_first <= analyzer_storage_mem_source_first;
			analyzer_storage_cdc_sink_last <= analyzer_storage_mem_source_last;
			analyzer_storage_cdc_sink_payload_data <= analyzer_storage_mem_source_payload_data;
		end
	endcase
end
assign analyzer_trigger_sink_sink_valid = analyzer_mux_source_valid;
assign analyzer_mux_source_ready = analyzer_trigger_sink_sink_ready;
assign analyzer_trigger_sink_sink_first = analyzer_mux_source_first;
assign analyzer_trigger_sink_sink_last = analyzer_mux_source_last;
assign analyzer_trigger_sink_sink_payload_data = analyzer_mux_source_payload_data;
assign analyzer_trigger_sink_sink_payload_hit = analyzer_mux_source_payload_hit;
assign analyzer_subsampler_sink_valid = analyzer_trigger_source_source_valid;
assign analyzer_trigger_source_source_ready = analyzer_subsampler_sink_ready;
assign analyzer_subsampler_sink_first = analyzer_trigger_source_source_first;
assign analyzer_subsampler_sink_last = analyzer_trigger_source_source_last;
assign analyzer_subsampler_sink_payload_data = analyzer_trigger_source_source_payload_data;
assign analyzer_subsampler_sink_payload_hit = analyzer_trigger_source_source_payload_hit;
assign analyzer_storage_sink_sink_valid = analyzer_subsampler_source_valid;
assign analyzer_subsampler_source_ready = analyzer_storage_sink_sink_ready;
assign analyzer_storage_sink_sink_first = analyzer_subsampler_source_first;
assign analyzer_storage_sink_sink_last = analyzer_subsampler_source_last;
assign analyzer_storage_sink_sink_payload_data = analyzer_subsampler_source_payload_data;
assign analyzer_storage_sink_sink_payload_hit = analyzer_subsampler_source_payload_hit;
always @(*) begin
	basesoc_wishbone_ack <= 1'd0;
	basesoc_dat_w <= 32'd0;
	basesoc_wishbone_dat_r <= 32'd0;
	next_state <= 1'd0;
	basesoc_adr <= 14'd0;
	basesoc_we <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			basesoc_wishbone_dat_r <= basesoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			basesoc_dat_w <= basesoc_wishbone_dat_w;
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_wishbone_adr = wishbone_adr;
assign basesoc_wishbone_dat_w = wishbone_dat_w;
assign wishbone_dat_r = basesoc_wishbone_dat_r;
assign basesoc_wishbone_sel = wishbone_sel;
assign basesoc_wishbone_cyc = wishbone_cyc;
assign basesoc_wishbone_stb = wishbone_stb;
assign wishbone_ack = basesoc_wishbone_ack;
assign basesoc_wishbone_we = wishbone_we;
assign basesoc_wishbone_cti = wishbone_cti;
assign basesoc_wishbone_bte = wishbone_bte;
assign wishbone_err = basesoc_wishbone_err;
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_mux_value0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_mux_value0_re <= 1'd0;
	csrbank0_mux_value0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_mux_value0_re <= interface0_bank_bus_we;
		csrbank0_mux_value0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_trigger_enable0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_trigger_enable0_we <= 1'd0;
	csrbank0_trigger_enable0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_trigger_enable0_re <= interface0_bank_bus_we;
		csrbank0_trigger_enable0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_trigger_done_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_trigger_done_we <= 1'd0;
	csrbank0_trigger_done_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_trigger_done_re <= interface0_bank_bus_we;
		csrbank0_trigger_done_we <= (~interface0_bank_bus_we);
	end
end
assign analyzer_trigger_mem_write_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	analyzer_trigger_mem_write_re <= 1'd0;
	analyzer_trigger_mem_write_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd3))) begin
		analyzer_trigger_mem_write_re <= interface0_bank_bus_we;
		analyzer_trigger_mem_write_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_trigger_mem_mask0_r = interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank0_trigger_mem_mask0_re <= 1'd0;
	csrbank0_trigger_mem_mask0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank0_trigger_mem_mask0_re <= interface0_bank_bus_we;
		csrbank0_trigger_mem_mask0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_trigger_mem_value0_r = interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank0_trigger_mem_value0_we <= 1'd0;
	csrbank0_trigger_mem_value0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank0_trigger_mem_value0_re <= interface0_bank_bus_we;
		csrbank0_trigger_mem_value0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_trigger_mem_full_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_trigger_mem_full_we <= 1'd0;
	csrbank0_trigger_mem_full_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank0_trigger_mem_full_re <= interface0_bank_bus_we;
		csrbank0_trigger_mem_full_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_subsampler_value0_r = interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank0_subsampler_value0_re <= 1'd0;
	csrbank0_subsampler_value0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank0_subsampler_value0_re <= interface0_bank_bus_we;
		csrbank0_subsampler_value0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_enable0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_storage_enable0_we <= 1'd0;
	csrbank0_storage_enable0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank0_storage_enable0_re <= interface0_bank_bus_we;
		csrbank0_storage_enable0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_done_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_storage_done_we <= 1'd0;
	csrbank0_storage_done_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd9))) begin
		csrbank0_storage_done_re <= interface0_bank_bus_we;
		csrbank0_storage_done_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_length0_r = interface0_bank_bus_dat_w[11:0];
always @(*) begin
	csrbank0_storage_length0_re <= 1'd0;
	csrbank0_storage_length0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd10))) begin
		csrbank0_storage_length0_re <= interface0_bank_bus_we;
		csrbank0_storage_length0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_offset0_r = interface0_bank_bus_dat_w[11:0];
always @(*) begin
	csrbank0_storage_offset0_we <= 1'd0;
	csrbank0_storage_offset0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd11))) begin
		csrbank0_storage_offset0_re <= interface0_bank_bus_we;
		csrbank0_storage_offset0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_mem_valid_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_storage_mem_valid_we <= 1'd0;
	csrbank0_storage_mem_valid_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd12))) begin
		csrbank0_storage_mem_valid_re <= interface0_bank_bus_we;
		csrbank0_storage_mem_valid_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_storage_mem_data_r = interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank0_storage_mem_data_re <= 1'd0;
	csrbank0_storage_mem_data_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd13))) begin
		csrbank0_storage_mem_data_re <= interface0_bank_bus_we;
		csrbank0_storage_mem_data_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_mux_value0_w = analyzer_mux_value_storage;
assign csrbank0_trigger_enable0_w = analyzer_trigger_enable_storage;
assign csrbank0_trigger_done_w = analyzer_trigger_done_status;
assign analyzer_trigger_done_we = csrbank0_trigger_done_we;
assign csrbank0_trigger_mem_mask0_w = analyzer_trigger_mem_mask_storage[15:0];
assign csrbank0_trigger_mem_value0_w = analyzer_trigger_mem_value_storage[15:0];
assign csrbank0_trigger_mem_full_w = analyzer_trigger_mem_full_status;
assign analyzer_trigger_mem_full_we = csrbank0_trigger_mem_full_we;
assign csrbank0_subsampler_value0_w = analyzer_subsampler_value_storage[15:0];
assign csrbank0_storage_enable0_w = analyzer_storage_enable_storage;
assign csrbank0_storage_done_w = analyzer_storage_done_status;
assign analyzer_storage_done_we = csrbank0_storage_done_we;
assign csrbank0_storage_length0_w = analyzer_storage_length_storage[11:0];
assign csrbank0_storage_offset0_w = analyzer_storage_offset_storage[11:0];
assign csrbank0_storage_mem_valid_w = analyzer_storage_mem_valid_status;
assign analyzer_storage_mem_valid_we = csrbank0_storage_mem_valid_we;
assign csrbank0_storage_mem_data_w = analyzer_storage_mem_data_status[15:0];
assign analyzer_storage_mem_data_we = csrbank0_storage_mem_data_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_reset0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_reset0_we <= 1'd0;
	csrbank1_reset0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_reset0_re <= interface1_bank_bus_we;
		csrbank1_reset0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_scratch0_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank1_scratch0_we <= 1'd0;
	csrbank1_scratch0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_scratch0_re <= interface1_bank_bus_we;
		csrbank1_scratch0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_bus_errors_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank1_bus_errors_re <= 1'd0;
	csrbank1_bus_errors_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_bus_errors_re <= interface1_bank_bus_we;
		csrbank1_bus_errors_we <= (~interface1_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank1_reset0_w = reset_storage[1:0];
assign csrbank1_scratch0_w = scratch_storage[31:0];
assign csrbank1_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank1_bus_errors_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (interface0_bank_bus_dat_r | interface1_bank_bus_dat_r);
assign rx_rx = multiregimpl0_regs1;
assign analyzer_mux_value = multiregimpl1_regs1;
assign analyzer_trigger_enable = multiregimpl2_regs1;
assign analyzer_trigger_done_status = multiregimpl3_regs1;
assign analyzer_trigger_mem_produce_rdomain = multiregimpl4_regs1;
assign analyzer_trigger_mem_consume_wdomain = multiregimpl5_regs1;
assign analyzer_subsampler_value = multiregimpl6_regs1;
assign analyzer_storage_enable = multiregimpl7_regs1;
assign analyzer_storage_length = multiregimpl8_regs1;
assign analyzer_storage_offset = multiregimpl9_regs1;
assign analyzer_storage_done_status = multiregimpl10_regs1;
assign analyzer_storage_cdc_produce_rdomain = multiregimpl11_regs1;
assign analyzer_storage_cdc_consume_wdomain = multiregimpl12_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge scope_clk) begin
	analyzer_trigger_enable_d <= analyzer_trigger_enable;
	analyzer_trigger_mem_graycounter1_q_binary <= analyzer_trigger_mem_graycounter1_q_next_binary;
	analyzer_trigger_mem_graycounter1_q <= analyzer_trigger_mem_graycounter1_q_next;
	if (analyzer_trigger_wait) begin
		if ((~analyzer_trigger_done1)) begin
			analyzer_trigger_count <= (analyzer_trigger_count - 1'd1);
		end
	end else begin
		analyzer_trigger_count <= 6'd32;
	end
	if (analyzer_subsampler_source_ready) begin
		if (analyzer_subsampler_done) begin
			analyzer_subsampler_counter <= 1'd0;
		end else begin
			if (analyzer_subsampler_sink_valid) begin
				analyzer_subsampler_counter <= (analyzer_subsampler_counter + 1'd1);
			end
		end
	end
	analyzer_storage_enable_d <= analyzer_storage_enable;
	if (analyzer_storage_mem_syncfifo_re) begin
		analyzer_storage_mem_readable <= 1'd1;
	end else begin
		if (analyzer_storage_mem_re) begin
			analyzer_storage_mem_readable <= 1'd0;
		end
	end
	if (((analyzer_storage_mem_syncfifo_we & analyzer_storage_mem_syncfifo_writable) & (~analyzer_storage_mem_replace))) begin
		analyzer_storage_mem_produce <= (analyzer_storage_mem_produce + 1'd1);
	end
	if (analyzer_storage_mem_do_read) begin
		analyzer_storage_mem_consume <= (analyzer_storage_mem_consume + 1'd1);
	end
	if (((analyzer_storage_mem_syncfifo_we & analyzer_storage_mem_syncfifo_writable) & (~analyzer_storage_mem_replace))) begin
		if ((~analyzer_storage_mem_do_read)) begin
			analyzer_storage_mem_level0 <= (analyzer_storage_mem_level0 + 1'd1);
		end
	end else begin
		if (analyzer_storage_mem_do_read) begin
			analyzer_storage_mem_level0 <= (analyzer_storage_mem_level0 - 1'd1);
		end
	end
	analyzer_storage_cdc_graycounter0_q_binary <= analyzer_storage_cdc_graycounter0_q_next_binary;
	analyzer_storage_cdc_graycounter0_q <= analyzer_storage_cdc_graycounter0_q_next;
	if (analyzer_storage_wait) begin
		if ((~analyzer_storage_done1)) begin
			analyzer_storage_count <= (analyzer_storage_count - 1'd1);
		end
	end else begin
		analyzer_storage_count <= 12'd2048;
	end
	litescopeanalyzer_state <= litescopeanalyzer_next_state;
	if (scope_rst) begin
		analyzer_trigger_enable_d <= 1'd0;
		analyzer_trigger_mem_graycounter1_q <= 5'd0;
		analyzer_trigger_mem_graycounter1_q_binary <= 5'd0;
		analyzer_trigger_count <= 6'd32;
		analyzer_subsampler_counter <= 16'd0;
		analyzer_storage_enable_d <= 1'd0;
		analyzer_storage_mem_readable <= 1'd0;
		analyzer_storage_mem_level0 <= 12'd0;
		analyzer_storage_mem_produce <= 11'd0;
		analyzer_storage_mem_consume <= 11'd0;
		analyzer_storage_cdc_graycounter0_q <= 3'd0;
		analyzer_storage_cdc_graycounter0_q_binary <= 3'd0;
		analyzer_storage_count <= 12'd2048;
		litescopeanalyzer_state <= 2'd0;
	end
	multiregimpl1_regs0 <= analyzer_mux_value_storage;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= analyzer_trigger_enable_storage;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl4_regs0 <= analyzer_trigger_mem_graycounter0_q;
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl6_regs0 <= analyzer_subsampler_value_storage;
	multiregimpl6_regs1 <= multiregimpl6_regs0;
	multiregimpl7_regs0 <= analyzer_storage_enable_storage;
	multiregimpl7_regs1 <= multiregimpl7_regs0;
	multiregimpl8_regs0 <= analyzer_storage_length_storage;
	multiregimpl8_regs1 <= multiregimpl8_regs0;
	multiregimpl9_regs0 <= analyzer_storage_offset_storage;
	multiregimpl9_regs1 <= multiregimpl9_regs0;
	multiregimpl12_regs0 <= analyzer_storage_cdc_graycounter1_q;
	multiregimpl12_regs1 <= multiregimpl12_regs0;
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	{tx_tick, tx_phase} <= 24'd10307921;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 24'd10307921);
	end
	rs232phytx_state <= rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (uart_bridge_tx_rs232phytx_next_value_ce1) begin
		uart_bridge_tx <= uart_bridge_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 24'd10307921);
	end
	rs232phyrx_state <= rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	uartbone_state <= uartbone_next_state;
	if (bytes_count_next_value_ce0) begin
		bytes_count <= bytes_count_next_value0;
	end
	if (words_count_next_value_ce1) begin
		words_count <= words_count_next_value1;
	end
	if (cmd_next_value_ce2) begin
		cmd <= cmd_next_value2;
	end
	if (length_next_value_ce3) begin
		length <= length_next_value3;
	end
	if (address_next_value_ce4) begin
		address <= address_next_value4;
	end
	if (incr_next_value_ce5) begin
		incr <= incr_next_value5;
	end
	if (data_next_value_ce6) begin
		data <= data_next_value6;
	end
	if (reset) begin
		incr <= 1'd0;
		uartbone_state <= 3'd0;
	end
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 23'd4800000;
	end
	analyzer_trigger_mem_graycounter0_q_binary <= analyzer_trigger_mem_graycounter0_q_next_binary;
	analyzer_trigger_mem_graycounter0_q <= analyzer_trigger_mem_graycounter0_q_next;
	analyzer_storage_cdc_graycounter1_q_binary <= analyzer_storage_cdc_graycounter1_q_next_binary;
	analyzer_storage_cdc_graycounter1_q <= analyzer_storage_cdc_graycounter1_q_next;
	state <= next_state;
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_mux_value0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_trigger_enable0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_trigger_done_w;
			end
			2'd3: begin
				interface0_bank_bus_dat_r <= analyzer_trigger_mem_write_w;
			end
			3'd4: begin
				interface0_bank_bus_dat_r <= csrbank0_trigger_mem_mask0_w;
			end
			3'd5: begin
				interface0_bank_bus_dat_r <= csrbank0_trigger_mem_value0_w;
			end
			3'd6: begin
				interface0_bank_bus_dat_r <= csrbank0_trigger_mem_full_w;
			end
			3'd7: begin
				interface0_bank_bus_dat_r <= csrbank0_subsampler_value0_w;
			end
			4'd8: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_enable0_w;
			end
			4'd9: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_done_w;
			end
			4'd10: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_length0_w;
			end
			4'd11: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_offset0_w;
			end
			4'd12: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_mem_valid_w;
			end
			4'd13: begin
				interface0_bank_bus_dat_r <= csrbank0_storage_mem_data_w;
			end
		endcase
	end
	if (csrbank0_mux_value0_re) begin
		analyzer_mux_value_storage <= csrbank0_mux_value0_r;
	end
	analyzer_mux_value_re <= csrbank0_mux_value0_re;
	if (csrbank0_trigger_enable0_re) begin
		analyzer_trigger_enable_storage <= csrbank0_trigger_enable0_r;
	end
	analyzer_trigger_enable_re <= csrbank0_trigger_enable0_re;
	analyzer_trigger_done_re <= csrbank0_trigger_done_re;
	if (csrbank0_trigger_mem_mask0_re) begin
		analyzer_trigger_mem_mask_storage[15:0] <= csrbank0_trigger_mem_mask0_r;
	end
	analyzer_trigger_mem_mask_re <= csrbank0_trigger_mem_mask0_re;
	if (csrbank0_trigger_mem_value0_re) begin
		analyzer_trigger_mem_value_storage[15:0] <= csrbank0_trigger_mem_value0_r;
	end
	analyzer_trigger_mem_value_re <= csrbank0_trigger_mem_value0_re;
	analyzer_trigger_mem_full_re <= csrbank0_trigger_mem_full_re;
	if (csrbank0_subsampler_value0_re) begin
		analyzer_subsampler_value_storage[15:0] <= csrbank0_subsampler_value0_r;
	end
	analyzer_subsampler_value_re <= csrbank0_subsampler_value0_re;
	if (csrbank0_storage_enable0_re) begin
		analyzer_storage_enable_storage <= csrbank0_storage_enable0_r;
	end
	analyzer_storage_enable_re <= csrbank0_storage_enable0_re;
	analyzer_storage_done_re <= csrbank0_storage_done_re;
	if (csrbank0_storage_length0_re) begin
		analyzer_storage_length_storage[11:0] <= csrbank0_storage_length0_r;
	end
	analyzer_storage_length_re <= csrbank0_storage_length0_re;
	if (csrbank0_storage_offset0_re) begin
		analyzer_storage_offset_storage[11:0] <= csrbank0_storage_offset0_r;
	end
	analyzer_storage_offset_re <= csrbank0_storage_offset0_re;
	analyzer_storage_mem_valid_re <= csrbank0_storage_mem_valid_re;
	analyzer_storage_mem_data_re <= csrbank0_storage_mem_data_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_reset0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_scratch0_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_bus_errors_w;
			end
		endcase
	end
	if (csrbank1_reset0_re) begin
		reset_storage[1:0] <= csrbank1_reset0_r;
	end
	reset_re <= csrbank1_reset0_re;
	if (csrbank1_scratch0_re) begin
		scratch_storage[31:0] <= csrbank1_scratch0_r;
	end
	scratch_re <= csrbank1_scratch0_re;
	bus_errors_re <= csrbank1_bus_errors_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		uart_bridge_tx <= 1'd1;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		incr <= 1'd0;
		count <= 23'd4800000;
		analyzer_mux_value_storage <= 1'd0;
		analyzer_mux_value_re <= 1'd0;
		analyzer_trigger_enable_storage <= 1'd0;
		analyzer_trigger_enable_re <= 1'd0;
		analyzer_trigger_done_re <= 1'd0;
		analyzer_trigger_mem_mask_storage <= 16'd0;
		analyzer_trigger_mem_mask_re <= 1'd0;
		analyzer_trigger_mem_value_storage <= 16'd0;
		analyzer_trigger_mem_value_re <= 1'd0;
		analyzer_trigger_mem_full_re <= 1'd0;
		analyzer_trigger_mem_graycounter0_q <= 5'd0;
		analyzer_trigger_mem_graycounter0_q_binary <= 5'd0;
		analyzer_subsampler_value_storage <= 16'd0;
		analyzer_subsampler_value_re <= 1'd0;
		analyzer_storage_enable_storage <= 1'd0;
		analyzer_storage_enable_re <= 1'd0;
		analyzer_storage_done_re <= 1'd0;
		analyzer_storage_length_storage <= 12'd0;
		analyzer_storage_length_re <= 1'd0;
		analyzer_storage_offset_storage <= 12'd0;
		analyzer_storage_offset_re <= 1'd0;
		analyzer_storage_mem_valid_re <= 1'd0;
		analyzer_storage_mem_data_re <= 1'd0;
		analyzer_storage_cdc_graycounter1_q <= 3'd0;
		analyzer_storage_cdc_graycounter1_q_binary <= 3'd0;
		rs232phytx_state <= 1'd0;
		rs232phyrx_state <= 1'd0;
		uartbone_state <= 3'd0;
		state <= 1'd0;
	end
	multiregimpl0_regs0 <= uart_bridge_rx;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl3_regs0 <= analyzer_trigger_done0;
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl5_regs0 <= analyzer_trigger_mem_graycounter1_q;
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl10_regs0 <= analyzer_storage_done0;
	multiregimpl10_regs1 <= multiregimpl10_regs0;
	multiregimpl11_regs0 <= analyzer_storage_cdc_graycounter0_q;
	multiregimpl11_regs1 <= multiregimpl11_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 16-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage[0:15];
reg [33:0] storage_dat0;
reg [33:0] storage_dat1;
always @(posedge sys_clk) begin
	if (analyzer_trigger_mem_wrport_we)
		storage[analyzer_trigger_mem_wrport_adr] <= analyzer_trigger_mem_wrport_dat_w;
	storage_dat0 <= storage[analyzer_trigger_mem_wrport_adr];
end
always @(posedge scope_clk) begin
	storage_dat1 <= storage[analyzer_trigger_mem_rdport_adr];
end
assign analyzer_trigger_mem_wrport_dat_r = storage_dat0;
assign analyzer_trigger_mem_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 2048-words x 18-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 18 
// Port 1 | Read: Sync  | Write: ---- | 
reg [17:0] storage_1[0:2047];
reg [17:0] storage_1_dat0;
reg [17:0] storage_1_dat1;
always @(posedge scope_clk) begin
	if (analyzer_storage_mem_wrport_we)
		storage_1[analyzer_storage_mem_wrport_adr] <= analyzer_storage_mem_wrport_dat_w;
	storage_1_dat0 <= storage_1[analyzer_storage_mem_wrport_adr];
end
always @(posedge scope_clk) begin
	if (analyzer_storage_mem_rdport_re)
		storage_1_dat1 <= storage_1[analyzer_storage_mem_rdport_adr];
end
assign analyzer_storage_mem_wrport_dat_r = storage_1_dat0;
assign analyzer_storage_mem_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 18-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 18 
// Port 1 | Read: Sync  | Write: ---- | 
reg [17:0] storage_2[0:3];
reg [17:0] storage_2_dat0;
reg [17:0] storage_2_dat1;
always @(posedge scope_clk) begin
	if (analyzer_storage_cdc_wrport_we)
		storage_2[analyzer_storage_cdc_wrport_adr] <= analyzer_storage_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[analyzer_storage_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_2_dat1 <= storage_2[analyzer_storage_cdc_rdport_adr];
end
assign analyzer_storage_cdc_wrport_dat_r = storage_2_dat0;
assign analyzer_storage_cdc_rdport_dat_r = storage_2_dat1;


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2021-12-09 16:07:09.
//------------------------------------------------------------------------------
